{"ast":null,"code":"var _jsxFileName = \"/Users/Neha/Documents/FirstSem/CS648/Project/Assignment13/src/Products.js\";\nimport React, { Component } from 'react';\nimport Filters from './Filters';\nimport ProductTable from './ProductTable';\nimport ProductForm from './ProductForm';\nconst RESET_VALUES = {\n  productid: '',\n  category: '',\n  price: '',\n  name: '',\n  instock: false\n};\nclass Products extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filterText: '',\n      products: {},\n      currentProduct: {\n        id: '',\n        product: Object.assign({}, RESET_VALUES)\n      }\n    };\n    this.handleFilter = this.handleFilter.bind(this);\n    this.handleDestroy = this.handleDestroy.bind(this);\n    this.updateDB = this.updateDB.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n  }\n\n  //Displays the products from database, if there are any, on mounting\n  componentDidMount() {\n    fetch(\"http://localhost:3001/product/get/\").then(res => res.json()).then(result => {\n      this.setState({\n        filterText: '',\n        products: result,\n        currentProduct: {\n          id: '',\n          product: Object.assign({}, RESET_VALUES)\n        }\n      });\n    }, error => {\n      this.setState({\n        filterText: '',\n        currentProduct: {\n          id: '',\n          product: Object.assign({}, RESET_VALUES)\n        },\n        error\n      });\n    });\n  }\n\n  //Update DB using APIs declared in server.js based on the operation\n  updateDB(product, operation) {\n    let endpoint = \"\";\n    if (operation === 'insert') endpoint = 'http://localhost:3001/product/create/';else endpoint = 'http://localhost:3001/product/update/' + product.id;\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', endpoint);\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    xhr.send(JSON.stringify(product));\n    this.setState(prevState => {\n      let products = prevState.products;\n      products[product.id] = product;\n      return {\n        products\n      };\n    });\n    this.setState({\n      currentProduct: {\n        id: '',\n        product: Object.assign({}, RESET_VALUES)\n      }\n    });\n  }\n  handleFilter(filterInput) {\n    this.setState(filterInput);\n  }\n  handleUpdate(product) {\n    this.setState(prevState => {\n      prevState.currentProduct = product;\n      return {\n        product\n      };\n    });\n  }\n  handleSave(product) {\n    if (!product.id) {\n      product.id = new Date().getTime();\n      this.updateDB(product, 'insert');\n    } else {\n      this.updateDB(product, 'update');\n    }\n  }\n  handleDestroy(productId) {\n    fetch(\"http://localhost:3001/product/delete/\" + productId).then(res => res.json()).then(result => {\n      this.setState({\n        products: result,\n        currentProduct: {\n          id: '',\n          product: Object.assign({}, RESET_VALUES)\n        }\n      });\n    }, error => {\n      this.setState({\n        filterText: '',\n        currentProduct: {\n          id: '',\n          product: Object.assign({}, RESET_VALUES)\n        },\n        error\n      });\n    });\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }\n    }, \"My Inventory\"), /*#__PURE__*/React.createElement(Filters, {\n      onFilter: this.handleFilter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ProductTable, {\n      products: this.state.products,\n      filterText: this.state.filterText,\n      onDestroy: this.handleDestroy,\n      onEdit: this.handleUpdate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ProductForm, {\n      onSave: this.handleSave,\n      product: this.state.currentProduct,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }\n    }));\n  }\n}\nexport default Products;","map":{"version":3,"names":["React","Component","Filters","ProductTable","ProductForm","RESET_VALUES","productid","category","price","name","instock","Products","constructor","props","state","filterText","products","currentProduct","id","product","Object","assign","handleFilter","bind","handleDestroy","updateDB","handleSave","handleUpdate","componentDidMount","fetch","then","res","json","result","setState","error","operation","endpoint","xhr","XMLHttpRequest","open","setRequestHeader","send","JSON","stringify","prevState","filterInput","Date","getTime","productId","render"],"sources":["/Users/Neha/Documents/FirstSem/CS648/Project/Assignment13/src/Products.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport Filters from './Filters'\r\nimport ProductTable from './ProductTable'\r\nimport ProductForm from './ProductForm'\r\n\r\nconst RESET_VALUES = { productid: '', category: '', price: '', name: '', instock:false}\r\n\r\nclass Products extends Component {\r\n    constructor(props) {        \r\n        super(props)        \r\n        this.state = {\r\n            filterText: '',\r\n            products: {}, \r\n            currentProduct:{\r\n                id:'',\r\n                product:Object.assign({}, RESET_VALUES)\r\n            }\r\n        }\r\n        this.handleFilter = this.handleFilter.bind(this)\r\n        this.handleDestroy = this.handleDestroy.bind(this)\r\n        this.updateDB = this.updateDB.bind(this) \r\n        this.handleSave = this.handleSave.bind(this)  \r\n        this.handleUpdate = this.handleUpdate.bind(this)             \r\n    }\r\n    \r\n    //Displays the products from database, if there are any, on mounting\r\n    componentDidMount(){           \r\n        fetch(\"http://localhost:3001/product/get/\")\r\n        .then(res => res.json())\r\n        .then(\r\n            (result) => {         \r\n                this.setState({\r\n                    filterText:'',\r\n                    products:result,\r\n                    currentProduct : { \r\n                        id : '',\r\n                        product :  Object.assign({}, RESET_VALUES)                        \r\n                    }\r\n                });\r\n            },\r\n            (error) => {\r\n                this.setState({\r\n                    filterText:'',\r\n                    currentProduct : {\r\n                        id : '',\r\n                        product :  Object.assign({}, RESET_VALUES)                        \r\n                    },\r\n                    error\r\n                })\r\n            }\r\n        )\r\n    }\r\n\r\n    //Update DB using APIs declared in server.js based on the operation\r\n    updateDB(product,operation){   \r\n        let endpoint=\"\";\r\n        \r\n        if(operation === 'insert')\r\n            endpoint = 'http://localhost:3001/product/create/'\r\n        else\r\n            endpoint = 'http://localhost:3001/product/update/' + product.id\r\n        \r\n        var xhr = new XMLHttpRequest()\r\n        xhr.open('POST',endpoint)\r\n        xhr.setRequestHeader('Content-Type','application/json')\r\n        xhr.send(JSON.stringify(product));\r\n        this.setState((prevState) => {            \r\n            let products = prevState.products\r\n            products[product.id] = product\r\n            return { products }\r\n        })\r\n        this.setState({                    \r\n            currentProduct : { \r\n                id : '',\r\n                product :  Object.assign({}, RESET_VALUES)                                                \r\n            }\r\n        })\r\n    }\r\n\r\n    handleFilter(filterInput) {\r\n        this.setState(filterInput)\r\n    }\r\n\r\n    handleUpdate(product){        \r\n        this.setState((prevState) => {\r\n            prevState.currentProduct = product;\r\n            return {product}            \r\n        })        \r\n    }\r\n    \r\n    handleSave(product) {          \r\n        if (!product.id) {\r\n            product.id = new Date().getTime()\r\n            this.updateDB(product,'insert')            \r\n        }\r\n        else {\r\n            this.updateDB(product, 'update')\r\n        }                                \r\n    }    \r\n\r\n    handleDestroy(productId) {        \r\n        fetch(\"http://localhost:3001/product/delete/\" + productId)\r\n        .then(res => res.json())\r\n        .then(\r\n            (result) => {                \r\n                this.setState({                    \r\n                    products:result,\r\n                    currentProduct : { \r\n                        id : '',\r\n                        product :  Object.assign({}, RESET_VALUES)                                                \r\n                    }\r\n                });\r\n            },\r\n            (error) => {\r\n                this.setState({\r\n                    filterText:'',\r\n                    currentProduct : { \r\n                        id : '',\r\n                        product :  Object.assign({}, RESET_VALUES)\r\n                    },\r\n                    error\r\n                })\r\n            }\r\n        )        \r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div>\r\n                <h1>My Inventory</h1>\r\n                <Filters \r\n                    onFilter={this.handleFilter}></Filters>\r\n                <ProductTable \r\n                    products={this.state.products}\r\n                    filterText={this.state.filterText}\r\n                    onDestroy={this.handleDestroy}\r\n                    onEdit={this.handleUpdate}>\r\n                </ProductTable>\r\n                <ProductForm\r\n                    onSave={this.handleSave} product={this.state.currentProduct}>\r\n                </ProductForm>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Products"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}